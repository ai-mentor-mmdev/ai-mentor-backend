# ========================= LLM Learning System Makefile =========================
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –æ–±—É—á–µ–Ω–∏—è —Å –ò–ò
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make [–∫–æ–º–∞–Ω–¥–∞]
# –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥: make help

.PHONY: help install setup-env parse-kb run-backend dev clean test db-init db-reset db-backup db-restore logs status check-deps

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PYTHON = python3
PIP = pip
VENV = venv
BACKEND_HOST = 0.0.0.0
BACKEND_PORT = 8000
DATABASE_FILE = learning_system.db
KNOWLEDGE_BASE_PATH = ./knowledge_base
LOGS_DIR = logs
BACKUP_DIR = backups

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
PURPLE = \033[0;35m
CYAN = \033[0;36m
WHITE = \033[1;37m
NC = \033[0m # No Color

# ========================= –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =========================

## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
help:
	@echo "$(CYAN)üöÄ LLM Learning System - Makefile Commands$(NC)"
	@echo ""
	@echo "$(WHITE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:$(NC)"
	@echo "  $(GREEN)make install$(NC)     - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
	@echo "  $(GREEN)make setup-env$(NC)   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ (.env —Ñ–∞–π–ª)"
	@echo "  $(GREEN)make check-deps$(NC)  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
	@echo ""
	@echo "$(WHITE)üóÉÔ∏è Database:$(NC)"
	@echo "  $(GREEN)make db-init$(NC)     - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
	@echo "  $(GREEN)make db-reset$(NC)    - –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
	@echo "  $(GREEN)make db-backup$(NC)   - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î"
	@echo "  $(GREEN)make db-restore$(NC)  - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
	@echo ""
	@echo "$(WHITE)üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:$(NC)"
	@echo "  $(GREEN)make parse-kb$(NC)    - –ü–∞—Ä—Å–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ –ë–î"
	@echo "  $(GREEN)make create-kb$(NC)   - –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
	@echo ""
	@echo "$(WHITE)üîß –ó–∞–ø—É—Å–∫:$(NC)"
	@echo "  $(GREEN)make run-backend$(NC) - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä"
	@echo "  $(GREEN)make dev$(NC)         - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "  $(GREEN)make prod$(NC)        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"
	@echo ""
	@echo "$(WHITE)üßπ –£—Ç–∏–ª–∏—Ç—ã:$(NC)"
	@echo "  $(GREEN)make clean$(NC)       - –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
	@echo "  $(GREEN)make test$(NC)        - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
	@echo "  $(GREEN)make logs$(NC)        - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
	@echo "  $(GREEN)make status$(NC)      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
	@echo "  $(GREEN)make requirements$(NC) - –û–±–Ω–æ–≤–∏—Ç—å requirements.txt"
	@echo ""
	@echo "$(WHITE)üîç –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:$(NC)"
	@echo "  $(GREEN)make lint$(NC)        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º"
	@echo "  $(GREEN)make format$(NC)      - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"
	@echo "  $(GREEN)make shell$(NC)       - –ó–∞–ø—É—Å—Ç–∏—Ç—å Python shell"
	@echo ""

# ========================= –£–°–¢–ê–ù–û–í–ö–ê –ò –ù–ê–°–¢–†–û–ô–ö–ê =========================

## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
install: check-python
	@echo "$(YELLOW)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt 2>/dev/null || $(PIP) install fastapi uvicorn openai bcrypt pyjwt python-multipart
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup-env:
	@echo "$(YELLOW)‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(CYAN)üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...$(NC)"; \
		echo "# LLM Learning System Environment" > .env; \
		echo "OPENAI_API_KEY=your-openai-api-key-here" >> .env; \
		echo "SECRET_KEY=$$(openssl rand -hex 32)" >> .env; \
		echo "DATABASE_URL=sqlite:///$(DATABASE_FILE)" >> .env; \
		echo "KNOWLEDGE_BASE_PATH=$(KNOWLEDGE_BASE_PATH)" >> .env; \
		echo "BACKEND_HOST=$(BACKEND_HOST)" >> .env; \
		echo "BACKEND_PORT=$(BACKEND_PORT)" >> .env; \
		echo "$(GREEN)‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω$(NC)"; \
		echo "$(YELLOW)‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à OPENAI_API_KEY –≤ .env$(NC)"; \
	else \
		echo "$(BLUE)‚ÑπÔ∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC)"; \
	fi

## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
check-deps:
	@echo "$(YELLOW)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	@command -v python3 >/dev/null 2>&1 || { echo "$(RED)‚ùå Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; exit 1; }
	@command -v pip3 >/dev/null 2>&1 || { echo "$(RED)‚ùå pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; exit 1; }
	@$(PYTHON) -c "import fastapi, uvicorn, openai, bcrypt, jwt" 2>/dev/null || { echo "$(RED)‚ùå –ù–µ –≤—Å–µ Python –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make install$(NC)"; exit 1; }
	@echo "$(GREEN)‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ$(NC)"

check-python:
	@command -v python3 >/dev/null 2>&1 || { echo "$(RED)‚ùå Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+$(NC)"; exit 1; }

# ========================= –ë–ê–ó–ê –î–ê–ù–ù–´–• =========================

## –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db-init:
	@echo "$(YELLOW)üóÉÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@$(PYTHON) -c "from backend import Database; db = Database(); print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')"
	@echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞$(NC)"

## –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db-reset:
	@echo "$(YELLOW)üóÉÔ∏è –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (y/N): " confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		rm -f $(DATABASE_FILE); \
		$(MAKE) db-init; \
		echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞$(NC)"; \
	else \
		echo "$(BLUE)‚ÑπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞$(NC)"; \
	fi

## –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î
db-backup:
	@echo "$(YELLOW)üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...$(NC)"
	@mkdir -p $(BACKUP_DIR)
	@if [ -f $(DATABASE_FILE) ]; then \
		cp $(DATABASE_FILE) $(BACKUP_DIR)/$(DATABASE_FILE)_backup_$$(date +%Y%m%d_%H%M%S); \
		echo "$(GREEN)‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ $(BACKUP_DIR)$(NC)"; \
	else \
		echo "$(RED)‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
	fi

## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
db-restore:
	@echo "$(YELLOW)üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@if [ -z "$(BACKUP_FILE)" ]; then \
		echo "$(RED)‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: make db-restore BACKUP_FILE=path/to/backup$(NC)"; \
		exit 1; \
	fi
	@if [ -f "$(BACKUP_FILE)" ]; then \
		cp "$(BACKUP_FILE)" $(DATABASE_FILE); \
		echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞$(NC)"; \
	else \
		echo "$(RED)‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
	fi

# ========================= –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô =========================

## –ü–∞—Ä—Å–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
parse-kb: check-deps
	@echo "$(YELLOW)üìö –ü–∞—Ä—Å–∏–Ω–≥ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make setup-env$(NC)"; \
		exit 1; \
	fi
	@if [ ! -d $(KNOWLEDGE_BASE_PATH) ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  –ü–∞–ø–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é –ø—Ä–∏–º–µ—Ä...$(NC)"; \
		$(MAKE) create-kb; \
	fi
	@export $$(cat .env | grep -v '^#' | xargs) && $(PYTHON) parse.py
	@echo "$(GREEN)‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω$(NC)"

## –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
create-kb:
	@echo "$(YELLOW)üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...$(NC)"
	@mkdir -p $(KNOWLEDGE_BASE_PATH)/python_basics
	@echo "# –í–≤–µ–¥–µ–Ω–∏–µ –≤ Python\n\n–üython - —ç—Ç–æ –º–æ—â–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è." > $(KNOWLEDGE_BASE_PATH)/python_basics/intro.md
	@echo "# –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è\n\n1. –û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞\n2. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö\n3. –§—É–Ω–∫—Ü–∏–∏" > $(KNOWLEDGE_BASE_PATH)/python_basics/edu-plan.md
	@echo "# –ë–ª–æ–∫ 1: –û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞\n\n## –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\n\n–í Python –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–æ—Å—Ç–æ:\n\n\`\`\`python\nname = 'Python'\nversion = 3.9\n\`\`\`" > $(KNOWLEDGE_BASE_PATH)/python_basics/block-01-syntax.md
	@echo "$(GREEN)‚úÖ –ü—Ä–∏–º–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω –≤ $(KNOWLEDGE_BASE_PATH)$(NC)"

# ========================= –ó–ê–ü–£–°–ö =========================

## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä
run-backend: check-deps
	@echo "$(YELLOW)üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make setup-env$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f $(DATABASE_FILE) ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é...$(NC)"; \
		$(MAKE) db-init; \
	fi
	@echo "$(GREEN)üåü –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://$(BACKEND_HOST):$(BACKEND_PORT)$(NC)"
	@echo "$(GREEN)üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://$(BACKEND_HOST):$(BACKEND_PORT)/docs$(NC)"
	@export $$(cat .env | grep -v '^#' | xargs) && $(PYTHON) backend.py

## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev: check-deps
	@echo "$(YELLOW)üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@mkdir -p $(LOGS_DIR)
	@if [ ! -f .env ]; then $(MAKE) setup-env; fi
	@if [ ! -f $(DATABASE_FILE) ]; then $(MAKE) db-init; fi
	@export $$(cat .env | grep -v '^#' | xargs) && $(PYTHON) backend.py --reload --log-level debug

## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
prod: check-deps
	@echo "$(YELLOW)üöÄ –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...$(NC)"
	@mkdir -p $(LOGS_DIR)
	@if [ ! -f .env ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞$(NC)"; \
		exit 1; \
	fi
	@export $$(cat .env | grep -v '^#' | xargs) && \
	uvicorn backend:app --host $(BACKEND_HOST) --port $(BACKEND_PORT) --workers 4 \
		--log-file $(LOGS_DIR)/app.log --access-log --no-use-colors

# ========================= –£–¢–ò–õ–ò–¢–´ =========================

## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
clean:
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(NC)"
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name ".DS_Store" -delete 2>/dev/null || true
	@rm -rf .pytest_cache 2>/dev/null || true
	@rm -rf htmlcov 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
logs:
	@echo "$(YELLOW)üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã:$(NC)"
	@if [ -f $(LOGS_DIR)/app.log ]; then \
		tail -f $(LOGS_DIR)/app.log; \
	else \
		echo "$(BLUE)‚ÑπÔ∏è  –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
	fi

## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
status:
	@echo "$(CYAN)üìä –°—Ç–∞—Ç—É—Å LLM Learning System:$(NC)"
	@echo ""
	@echo "$(WHITE)üìÅ –§–∞–π–ª—ã:$(NC)"
	@echo "  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $(if $(shell test -f $(DATABASE_FILE) && echo 1),$(GREEN)‚úÖ –ù–∞–π–¥–µ–Ω–∞$(NC),$(RED)‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞$(NC))"
	@echo "  –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: $(if $(shell test -d $(KNOWLEDGE_BASE_PATH) && echo 1),$(GREEN)‚úÖ –ù–∞–π–¥–µ–Ω–∞$(NC),$(RED)‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞$(NC))"
	@echo "  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $(if $(shell test -f .env && echo 1),$(GREEN)‚úÖ –ù–∞–π–¥–µ–Ω–∞$(NC),$(RED)‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞$(NC))"
	@echo ""
	@echo "$(WHITE)üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:$(NC)"
	@if [ -f $(DATABASE_FILE) ]; then \
		echo "  $$(sqlite3 $(DATABASE_FILE) 'SELECT COUNT(*) FROM topics;' 2>/dev/null || echo 0) —Ç–µ–º"; \
		echo "  $$(sqlite3 $(DATABASE_FILE) 'SELECT COUNT(*) FROM blocks;' 2>/dev/null || echo 0) –±–ª–æ–∫–æ–≤"; \
		echo "  $$(sqlite3 $(DATABASE_FILE) 'SELECT COUNT(*) FROM students;' 2>/dev/null || echo 0) —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"; \
	else \
		echo "  $(RED)–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞$(NC)"; \
	fi

## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
test:
	@echo "$(YELLOW)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@$(PYTHON) -m pytest tests/ -v 2>/dev/null || echo "$(BLUE)‚ÑπÔ∏è  –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É tests/$(NC)"

## –û–±–Ω–æ–≤–∏—Ç—å requirements.txt
requirements:
	@echo "$(YELLOW)üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt...$(NC)"
	@$(PIP) freeze > requirements.txt
	@echo "$(GREEN)‚úÖ requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω$(NC)"

# ========================= –†–ê–ó–†–ê–ë–û–¢–ö–ê =========================

## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º
lint:
	@echo "$(YELLOW)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...$(NC)"
	@$(PYTHON) -m flake8 *.py 2>/dev/null || echo "$(BLUE)‚ÑπÔ∏è  flake8 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install flake8$(NC)"

## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
format:
	@echo "$(YELLOW)üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	@$(PYTHON) -m black *.py 2>/dev/null || echo "$(BLUE)‚ÑπÔ∏è  black –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install black$(NC)"

## –ó–∞–ø—É—Å—Ç–∏—Ç—å Python shell
shell:
	@echo "$(YELLOW)üêç –ó–∞–ø—É—Å–∫ Python shell...$(NC)"
	@$(PYTHON) -i -c "from backend import *; print('Backend –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')"

# ========================= –°–û–°–¢–ê–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =========================

## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
setup: install setup-env create-kb db-init
	@echo "$(GREEN)üéâ –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: make dev$(NC)"

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
quickstart: setup parse-kb
	@echo "$(GREEN)üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä...$(NC)"
	@$(MAKE) run-backend

## –û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë
update: install requirements clean
	@echo "$(GREEN)üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

# ========================= –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê =========================

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
$(LOGS_DIR):
	@mkdir -p $(LOGS_DIR)

$(BACKUP_DIR):
	@mkdir -p $(BACKUP_DIR)

# –ü—Ä–∞–≤–∏–ª–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
.DEFAULT_GOAL := help