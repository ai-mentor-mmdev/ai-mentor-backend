#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥–ª–∞–≤ –∏–∑ –±–ª–æ–∫–æ–≤
"""

import os
import re
import json
import sqlite3
import asyncio
from pathlib import Path
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass

import openai
from openai import AsyncOpenAI

# ========================= –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =========================

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "your-openai-api-key")
DATABASE_URL = "learning_system.db"
KNOWLEDGE_BASE_PATH = "./knowledge_base"  # –ü—É—Ç—å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = AsyncOpenAI(api_key=OPENAI_API_KEY)


# ========================= –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• =========================

@dataclass
class Chapter:
    """–ì–ª–∞–≤–∞ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞"""
    title: str
    content: str
    order_index: int
    estimated_minutes: int


@dataclass
class Block:
    """–ë–ª–æ–∫ –æ–±—É—á–µ–Ω–∏—è"""
    filename: str
    title: str
    content: str
    chapters: List[Chapter]
    difficulty_level: int
    estimated_minutes: int
    order_index: int


@dataclass
class Topic:
    """–¢–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è"""
    name: str
    title: str
    description: str
    intro_content: str
    edu_plan_content: str
    blocks: List[Block]
    difficulty_level: int
    order_index: int


# ========================= LLM –°–ï–†–í–ò–° =========================

class LLMParser:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM"""

    @staticmethod
    async def extract_chapters_from_block(block_content: str, block_title: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–ª–∞–≤—ã –∏–∑ –±–ª–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É—è LLM"""

        system_prompt = """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫ –æ–±—É—á–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥–ª–∞–≤.

–ü–†–ê–í–ò–õ–ê:
1. –ù–∞–π–¥–∏ –≤—Å–µ –≥–ª–∞–≤—ã/—Ä–∞–∑–¥–µ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ (–æ–±—ã—á–Ω–æ –ø–æ–º–µ—á–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ #, ##, ###)
2. –î–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã –æ–ø—Ä–µ–¥–µ–ª–∏:
   - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã
   - –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥–ª–∞–≤—ã
   - –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö (–∏—Å—Ö–æ–¥—è –∏–∑ –æ–±—ä–µ–º–∞ —Ç–µ–∫—Å—Ç–∞)
3. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
4. –ï—Å–ª–∏ –≤ –±–ª–æ–∫–µ –Ω–µ—Ç —á–µ—Ç–∫–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤, —Å–æ–∑–¥–∞–π –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≥–ª–∞–≤—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞):
{
    "chapters": [
        {
            "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã",
            "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥–ª–∞–≤—ã",
            "estimated_minutes": 15
        }
    ]
}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –Ω–∏–∫–∞–∫–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!
"""

        user_prompt = f"""
–ë–ª–æ–∫: {block_title}

–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
{block_content}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –±–ª–æ–∫ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥–ª–∞–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
"""

        try:
            response = await client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=2000,
                temperature=0.3
            )

            content = response.choices[0].message.content.strip()

            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –±–ª–æ–∫–∏
            content = re.sub(r'```json\s*', '', content)
            content = re.sub(r'```\s*', '', content)

            # –ü–∞—Ä—Å–∏–º JSON
            result = json.loads(content)
            return result.get("chapters", [])

        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è –±–ª–æ–∫–∞ {block_title}: {e}")
            print(f"–û—Ç–≤–µ—Ç LLM: {content}")
            return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ LLM –¥–ª—è –±–ª–æ–∫–∞ {block_title}: {e}")
            return []

    @staticmethod
    async def extract_topic_info(topic_name: str, intro_content: str, edu_plan_content: str) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ"""

        system_prompt = """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–ó–ê–î–ê–ß–ò:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
2. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –û–ø—Ä–µ–¥–µ–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-5, –≥–¥–µ 1 - –Ω–æ–≤–∏—á–æ–∫, 5 - —ç–∫—Å–ø–µ—Ä—Ç)

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Ç–æ–ª—å–∫–æ JSON):
{
    "title": "–ö—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã",
    "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã",
    "difficulty_level": 3
}
"""

        user_prompt = f"""
–¢–µ–º–∞: {topic_name}

–í–≤–µ–¥–µ–Ω–∏–µ:
{intro_content[:1000]}...

–ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è:
{edu_plan_content[:1000]}...

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –≤–µ—Ä–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
"""

        try:
            response = await client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=500,
                temperature=0.3
            )

            content = response.choices[0].message.content.strip()
            content = re.sub(r'```json\s*', '', content)
            content = re.sub(r'```\s*', '', content)

            return json.loads(content)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ {topic_name}: {e}")
            return {
                "title": topic_name.replace("_", " ").title(),
                "description": f"–ò–∑—É—á–µ–Ω–∏–µ {topic_name}",
                "difficulty_level": 3
            }


# ========================= –§–ê–ô–õ–û–í–´–ô –ü–ê–†–°–ï–† =========================

class KnowledgeBaseParser:
    """–ü–∞—Ä—Å–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""

    def __init__(self, knowledge_base_path: str):
        self.knowledge_base_path = Path(knowledge_base_path)
        self.llm_parser = LLMParser()

    async def parse_knowledge_base(self) -> List[Topic]:
        """–ü–∞—Ä—Å–∏—Ç –≤—Å—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        topics = []

        if not self.knowledge_base_path.exists():
            print(f"‚ùå –ü—É—Ç—å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.knowledge_base_path}")
            return topics

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Ç–µ–º—ã)
        topic_dirs = [d for d in self.knowledge_base_path.iterdir() if d.is_dir()]

        for i, topic_dir in enumerate(sorted(topic_dirs)):
            print(f"üìö –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–º—É: {topic_dir.name}")

            topic = await self.parse_topic(topic_dir, i + 1)
            if topic:
                topics.append(topic)

        return topics

    async def parse_topic(self, topic_dir: Path, order_index: int) -> Optional[Topic]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Ç–µ–º—É"""
        topic_name = topic_dir.name

        # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        intro_content = self.read_file_safe(topic_dir / "intro.md")
        edu_plan_content = self.read_file_safe(topic_dir / "edu-plan.md")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ —Å –ø–æ–º–æ—â—å—é LLM
        topic_info = await self.llm_parser.extract_topic_info(
            topic_name, intro_content, edu_plan_content
        )

        # –ü–∞—Ä—Å–∏–º –±–ª–æ–∫–∏
        blocks = await self.parse_blocks(topic_dir)

        return Topic(
            name=topic_name,
            title=topic_info.get("title", topic_name.replace("_", " ").title()),
            description=topic_info.get("description", f"–ò–∑—É—á–µ–Ω–∏–µ {topic_name}"),
            intro_content=intro_content,
            edu_plan_content=edu_plan_content,
            blocks=blocks,
            difficulty_level=topic_info.get("difficulty_level", 3),
            order_index=order_index
        )

    async def parse_blocks(self, topic_dir: Path) -> List[Block]:
        """–ü–∞—Ä—Å–∏—Ç –±–ª–æ–∫–∏ –≤ —Ç–µ–º–µ"""
        blocks = []

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –±–ª–æ–∫–æ–≤
        block_files = sorted([f for f in topic_dir.iterdir()
                              if f.name.startswith("block-") and f.name.endswith(".md")])

        for i, block_file in enumerate(block_files):
            print(f"  üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–ª–æ–∫: {block_file.name}")

            block_content = self.read_file_safe(block_file)
            if not block_content:
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞
            block_title = self.extract_title_from_content(block_content) or f"–ë–ª–æ–∫ {i + 1}"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–ª–∞–≤—ã —Å –ø–æ–º–æ—â—å—é LLM
            chapters_data = await self.llm_parser.extract_chapters_from_block(
                block_content, block_title
            )

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≥–ª–∞–≤
            chapters = []
            total_minutes = 0

            for j, chapter_data in enumerate(chapters_data):
                chapter = Chapter(
                    title=chapter_data.get("title", f"–ì–ª–∞–≤–∞ {j + 1}"),
                    content=chapter_data.get("content", ""),
                    order_index=j + 1,
                    estimated_minutes=chapter_data.get("estimated_minutes", 15)
                )
                chapters.append(chapter)
                total_minutes += chapter.estimated_minutes

            # –ï—Å–ª–∏ –≥–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –≥–ª–∞–≤—É –∏–∑ –≤—Å–µ–≥–æ –±–ª–æ–∫–∞
            if not chapters:
                chapters = [Chapter(
                    title=block_title,
                    content=block_content,
                    order_index=1,
                    estimated_minutes=30
                )]
                total_minutes = 30

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª–æ–∫–∞
            difficulty = self.estimate_difficulty(block_content)

            block = Block(
                filename=block_file.name,
                title=block_title,
                content=block_content,
                chapters=chapters,
                difficulty_level=difficulty,
                estimated_minutes=total_minutes,
                order_index=i + 1
            )

            blocks.append(block)

        return blocks

    def read_file_safe(self, file_path: Path) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª"""
        try:
            if file_path.exists():
                return file_path.read_text(encoding='utf-8')
            return ""
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return ""

    def extract_title_from_content(self, content: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        lines = content.split('\n')
        for line in lines:
            line = line.strip()
            if line.startswith('# '):
                return line[2:].strip()
        return None

    def estimate_difficulty(self, content: str) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª–æ–∫–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        advanced_keywords = ['advanced', 'complex', 'enterprise', 'architecture', 'optimization']
        intermediate_keywords = ['configuration', 'setup', 'deployment', 'integration']

        content_lower = content.lower()

        advanced_count = sum(1 for word in advanced_keywords if word in content_lower)
        intermediate_count = sum(1 for word in intermediate_keywords if word in content_lower)

        if advanced_count > 0:
            return 4
        elif intermediate_count > 0:
            return 3
        else:
            return 2


# ========================= –ë–ê–ó–ê –î–ê–ù–ù–´–• =========================

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, db_path: str):
        self.db_path = db_path

    def clear_existing_data(self):
        """–û—á–∏—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        print("üóëÔ∏è  –û—á–∏—â–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...")

        # –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        cursor.execute("DELETE FROM chapters")
        cursor.execute("DELETE FROM progress")
        cursor.execute("DELETE FROM llm_requests")
        cursor.execute("DELETE FROM chat_sessions")
        cursor.execute("DELETE FROM blocks")
        cursor.execute("DELETE FROM topics")

        conn.commit()
        conn.close()

    def create_chapters_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≥–ª–∞–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
                       CREATE TABLE IF NOT EXISTS chapters
                       (
                           id
                           INTEGER
                           PRIMARY
                           KEY
                           AUTOINCREMENT,
                           block_id
                           INTEGER
                           NOT
                           NULL,
                           title
                           TEXT
                           NOT
                           NULL,
                           content
                           TEXT,
                           order_index
                           INTEGER
                           DEFAULT
                           0,
                           estimated_minutes
                           INTEGER
                           DEFAULT
                           15,
                           is_active
                           BOOLEAN
                           DEFAULT
                           1,
                           FOREIGN
                           KEY
                       (
                           block_id
                       ) REFERENCES blocks
                       (
                           id
                       )
                           )
                       ''')

        conn.commit()
        conn.close()

    def save_topics(self, topics: List[Topic]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–º—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É...")

        for topic in topics:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
            cursor.execute('''
                           INSERT INTO topics (title, description, difficulty_level, order_index)
                           VALUES (?, ?, ?, ?)
                           ''', (topic.title, topic.description, topic.difficulty_level, topic.order_index))

            topic_id = cursor.lastrowid

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫–∏
            for block in topic.blocks:
                cursor.execute('''
                               INSERT INTO blocks (topic_id, title, content, difficulty_level,
                                                   estimated_minutes, order_index)
                               VALUES (?, ?, ?, ?, ?, ?)
                               ''', (topic_id, block.title, block.content, block.difficulty_level,
                                     block.estimated_minutes, block.order_index))

                block_id = cursor.lastrowid

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–∞–≤—ã
                for chapter in block.chapters:
                    cursor.execute('''
                                   INSERT INTO chapters (block_id, title, content, order_index,
                                                         estimated_minutes)
                                   VALUES (?, ?, ?, ?, ?)
                                   ''', (block_id, chapter.title, chapter.content,
                                         chapter.order_index, chapter.estimated_minutes))

        conn.commit()
        conn.close()

    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM topics")
        topics_count = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM blocks")
        blocks_count = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM chapters")
        chapters_count = cursor.fetchone()[0]

        cursor.execute("SELECT SUM(estimated_minutes) FROM blocks")
        total_minutes = cursor.fetchone()[0] or 0

        conn.close()

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üìö –¢–µ–º: {topics_count}")
        print(f"   üìñ –ë–ª–æ–∫–æ–≤: {blocks_count}")
        print(f"   üìÑ –ì–ª–∞–≤: {chapters_count}")
        print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_minutes} –º–∏–Ω—É—Ç ({total_minutes / 60:.1f} —á–∞—Å–æ–≤)")


# ========================= –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =========================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if OPENAI_API_KEY == "your-openai-api-key":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    parser = KnowledgeBaseParser(KNOWLEDGE_BASE_PATH)
    db_manager = DatabaseManager(DATABASE_URL)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≥–ª–∞–≤
    db_manager.create_chapters_table()

    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    db_manager.clear_existing_data()

    # –ü–∞—Ä—Å–∏–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    topics = await parser.parse_knowledge_base()

    if not topics:
        print("‚ùå –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_manager.save_topics(topics)

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    db_manager.print_statistics()

    print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())